import argparse
import os
import pathlib
import datetime

import numpy as np
import scipy.signal as signal
import matplotlib.pyplot as plt


def byte_coef(i, b, taps):
    bit, off, tot = 1 << 7, i * 8, 0
    while bit:
        if bit & b:
            tot += taps[off]
        else:
            tot -= taps[off]
        bit >>= 1
        off += 1
    return tot


def main():
    base_path = pathlib.Path(os.path.dirname(os.path.abspath(__file__)))
    argument_parser = argparse.ArgumentParser("generate_pdm_fir.py",
                                              description="Python script to generate PDM Taps for the PDM FIR library")
    argument_parser.add_argument("-t", "--taps", type=int, metavar="<n_taps>", help="number of taps used by the filter")
    argument_parser.add_argument("-s", "--sampling", type=int, metavar="<sampling_frequency>",
                                 help="Sampling frequency of the Signal to Filter")
    argument_parser.add_argument("-c", "--cutoff", type=int, metavar="<cutoff_frequency>",
                                 help="Cutoff frequency of the filter (up to target PCM frequency / 2)")
    argument_parser.add_argument("-b", "--bits", type=int, metavar="<scale_bits>",
                                 help="Maximum number of bits used in the filter output")
    argument_parser.add_argument("-p", "--plot", action='store_true', help="Plot filter characteristics")
    args = argument_parser.parse_args()

    pdm_ftl_taps = args.taps if args.taps else 16
    pdm_ftl_sample_f = int(args.sampling / 1000) if args.sampling else 2048
    pdm_ftl_cutoff = int(args.cutoff / 1000) if args.cutoff else 16
    pdm_ftl_scale_bits = args.bits if args.bits else 30

    if pdm_ftl_sample_f / 128 < pdm_ftl_cutoff:
        print(
            "WARNING!!! Wrong Cutoff frequency! For a decimation factor of 64 cut off must be at a maximum of {:.2f} kHz (here {:.2f} kHz)".format(
                pdm_ftl_sample_f / 128, pdm_ftl_cutoff))

    print("Generating PDM Filter Static coefficients into {}".format((base_path / "pdm_fir" / "pdm_fir_.h").absolute()))

    taps_old = signal.firwin(pdm_ftl_taps * 16, pdm_ftl_cutoff, nyq=pdm_ftl_sample_f / 2)
    taps = (taps_old * (2 ** pdm_ftl_scale_bits)).astype(int)

    # Generating pdm_fir_.h HEADER
    gen_date = datetime.datetime.now().strftime("%d-%m-%Y %H:%M:%S")
    out_str = ["#ifndef PDM_FIR__H",
               "#define PDM_FIR__H",
               "/*",
               " +--------------------------------------------------+",
               " |                                                  |",
               " |{}Generated by {}{}|".format(" " * int((50 - (13 + len(argument_parser.prog))) / 2),
                                               argument_parser.prog,
                                               " " * int((50 - (13 + len(argument_parser.prog))) / 2)),
               " |{}{}{}|".format(" " * int((50 - len(gen_date)) / 2), gen_date,
                                  " " * (int((50 - len(gen_date)) / 2) + 1)),
               " |                                                  |",
               " +--------------------------------------------------+",
               "*/",
               "",
               "#define PDM_FTL_SCALE_BITS  {}".format(pdm_ftl_scale_bits),
               "#define PDM_FTL_TAPS        {}".format(pdm_ftl_taps),
               "",
               "static const int byte_coeff[PDM_FTL_TAPS*2][256] = {",
               ]
    for i in range(pdm_ftl_taps * 2):
        out_str.append("    {} // [{}]".format('{', i))
        coefs = ["{}".format(byte_coef(i, b, taps)) for b in range(256)]
        out_str.append("        {}".format(", ".join(coefs)))
        out_str.append("    },")

    out_str.append("};")
    out_str.append("#endif // PDM_FIR__H")
    out_str.append("")

    fp = open(base_path / "pdm_fir" / "pdm_fir_.h", "w")
    fp.write("\n".join(out_str))

    print("Generation Finished, you can now copy the folder \"{}\" into your C project".format(
        (base_path / "pdm_fir").absolute()))

    if args.plot:
        plt.title("Digital Filter Frequency Response")
        w, h = signal.freqz(taps_old)
        plt.plot(w * pdm_ftl_sample_f / (2 * np.pi), 20 * np.log10(np.abs(h)), 'b')

        plt.ylabel("Response (dB)")
        plt.xlabel("Frequency (kHz)")
        plt.show()
    return 0


if __name__ == "__main__":
    exit(main())
