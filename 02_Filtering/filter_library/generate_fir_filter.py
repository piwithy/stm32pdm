import argparse
import os
import pathlib
import datetime

import numpy as np
import scipy.signal
import scipy.signal as signal
import matplotlib.pyplot as plt


class PDMFir:
    def __init__(self, filter_taps: int, signal_fs: int, filter_cutoff: int, cutoff_window: int = 2000,
                 scale_bits: int = 30, plot: bool = False):
        print(
            "Generating PDM Filter LUT:\n\tPDM fs = {:.1f} kHz\n\tSignal fs = {:.1f} kHz\n\tCut Off Window: {:.1f} kHz".format(
                signal_fs / 1000, filter_cutoff / 1000, cutoff_window / 1000))
        self.taps_count = filter_taps
        self.scale_bits = scale_bits
        self.taps = scipy.signal.firwin(16 * self.taps_count, filter_cutoff, cutoff_window, fs=signal_fs)
        self.amplified_taps = (self.taps * (2 ** self.scale_bits)).astype(int)
        if plot:
            #plt.figure("FIR Window")
            #plt.title("FIR Window")
            #plt.plot(self.amplified_taps)

            plt.figure("Frequency Response")
            plt.title("Digital Frequency Response")
            plt.xlabel("Frequency (Hz)")
            plt.ylabel("Response (dB)")
            w, h = scipy.signal.freqz(self.taps)
            plt.plot(w * signal_fs / (2 * np.pi), 20 * np.log10(np.abs(h)))
        self.byte_coefs = self.__gen_byte_coef_array()

    def __gen_byte_coef_array(self):
        byte_coeff = np.zeros((self.taps_count * 2, 256), dtype='int32')
        for i in range(byte_coeff.shape[0]):
            for j in range(byte_coeff.shape[1]):
                byte_coeff[i][j] = self.__gen_byte_coef(i, j)
        return byte_coeff

    def __gen_byte_coef(self, i, b):
        bit, off, tot = 1 << 7, 8 * i, 0
        while bit:
            if bit & b:
                tot += self.amplified_taps[off]
            else:
                tot -= self.amplified_taps[off]
            bit >>= 1
            off += 1
        return tot


def byte_coef(i, b, taps):
    bit, off, tot = 1 << 7, i * 8, 0
    while bit:
        if bit & b:
            tot += taps[off]
        else:
            tot -= taps[off]
        bit >>= 1
        off += 1
    return tot


def gen_header(f: PDMFir, prog_name: str):
    gen_date = datetime.datetime.now().strftime("%d-%m-%Y %H:%M:%S")
    out_str = ["#ifndef PDM_FIR__H",
               "#define PDM_FIR__H",
               "/**",
               " * @file pdm_fir_.h",
               " * @brief File containing Generated LUT of the Fir filter",
               " * @date Generation: {}".format(gen_date),
               " */",
               ""
               "/*",
               " +--------------------------------------------------+",
               " |                                                  |",
               " |{}Generated by {}{}|".format(" " * int((50 - (13 + len(prog_name))) / 2), prog_name,
                                               " " * int((50 - (13 + len(prog_name))) / 2)),
               " |{}{}{}|".format(" " * int((50 - len(gen_date)) / 2), gen_date,
                                  " " * (int((50 - len(gen_date)) / 2) + 1)),
               " |                                                  |",
               " +--------------------------------------------------+",
               "*/",
               "",
               "#define PDM_FTL_SCALE_BITS  {}".format(f.scale_bits),
               "#define PDM_FTL_TAPS        {}".format(f.taps_count),
               "",
               ]
    return out_str


def gen_lut(f: PDMFir):
    out_str = [
        "static const int byte_coeff[PDM_FTL_TAPS*2][256] = {",

    ]
    for i in range(f.byte_coefs.shape[0]):
        coef_str = ""
        first = True
        out_str.append("\t{} // [{}]".format("{", i))
        for j in range(f.byte_coefs.shape[1]):
            if j % 8 == 0 and not first:
                out_str.append("\t\t" + coef_str[:-1])
                coef_str = ""
            first = False
            coef_str += "-0x{:08x}, ".format(-f.byte_coefs[i, j]) if f.byte_coefs[i, j] < 0 else " 0x{:08x}, ".format(
                f.byte_coefs[i, j])
        out_str.append("\t\t" + coef_str[:-1])
        out_str[-1] = out_str[-1][:-1]
        out_str.append("\t},")

    out_str[-1] = out_str[-1][:-1]
    out_str.append("};")
    return out_str


def main():
    base_path = pathlib.Path(os.path.dirname(os.path.abspath(__file__)))
    argument_parser = argparse.ArgumentParser("generate_pdm_fir.py",
                                              description="Python script to generate PDM Taps for the PDM FIR library")
    argument_parser.add_argument("-t", "--taps", required=True, type=int, metavar="<n_taps>",
                                 help="number of taps used by the filter")
    argument_parser.add_argument("-s", "--sampling", required=True, type=int, metavar="<sampling_frequency>",
                                 help="Sampling frequency of the Signal to Filter")
    argument_parser.add_argument("-c", "--cutoff", required=True, type=int, metavar="<cutoff_frequency>",
                                 help="Cutoff frequency of the filter (up to target PCM frequency / 2)")
    argument_parser.add_argument("-b", "--bits", required=True, type=int, metavar="<scale_bits>",
                                 help="Maximum number of bits used in the filter output")
    argument_parser.add_argument("-p", "--plot", action='store_true', help="Plot filter characteristics")
    args = argument_parser.parse_args()

    pdm_ftl_taps = args.taps if args.taps else 16
    pdm_ftl_sample_f = int(args.sampling) if args.sampling else 2048000
    pdm_ftl_cutoff = int(args.cutoff) if args.cutoff else 16000
    pdm_ftl_scale_bits = args.bits if args.bits else 30

    fil = PDMFir(pdm_ftl_taps, pdm_ftl_sample_f, pdm_ftl_cutoff, 200, pdm_ftl_scale_bits, args.plot)

    if pdm_ftl_sample_f / 128 < pdm_ftl_cutoff:
        print(
            "WARNING!!! Wrong Cutoff frequency! For a decimation factor of 64 cut off must be at a maximum of {:.2f} kHz (here {:.2f} kHz)".format(
                pdm_ftl_sample_f / 128, pdm_ftl_cutoff))

    print("Generating PDM Filter Static coefficients into {}".format((base_path / "pdm_fir" / "pdm_fir_.h").absolute()))

    out_str = gen_header(fil, argument_parser.prog)
    out_str += gen_lut(fil)

    # taps_old = signal.firwin(pdm_ftl_taps * 16, pdm_ftl_cutoff, nyq=pdm_ftl_sample_f / 2)
    # taps = (taps_old * (2 ** pdm_ftl_scale_bits)).astype(int)
    # if args.plot:
    #     plt.figure()
    #     plt.title("taps_old")
    #     plt.plot(taps_old)
    # # Generating pdm_fir_.h HEADER
    # gen_date = datetime.datetime.now().strftime("%d-%m-%Y %H:%M:%S")
    # out_str = ["#ifndef PDM_FIR__H",
    #            "#define PDM_FIR__H",
    #            "/**",
    #            " * @file pdm_fir_.h",
    #            " * @brief File containing Generated LUT of the Fir filter",
    #            " * @date Generation: {}".format(gen_date),
    #            " */",
    #            ""
    #            "/*",
    #            " +--------------------------------------------------+",
    #            " |                                                  |",
    #            " |{}Generated by {}{}|".format(" " * int((50 - (13 + len(argument_parser.prog))) / 2),
    #                                            argument_parser.prog,
    #                                            " " * int((50 - (13 + len(argument_parser.prog))) / 2)),
    #            " |{}{}{}|".format(" " * int((50 - len(gen_date)) / 2), gen_date,
    #                               " " * (int((50 - len(gen_date)) / 2) + 1)),
    #            " |                                                  |",
    #            " +--------------------------------------------------+",
    #            "*/",
    #            "",
    #            "#define PDM_FTL_SCALE_BITS  {}".format(pdm_ftl_scale_bits),
    #            "#define PDM_FTL_TAPS        {}".format(pdm_ftl_taps),
    #            "",
    #            "static const int byte_coeff[PDM_FTL_TAPS*2][256] = {",
    #            ]
    # plotted = False
    # for i in range(pdm_ftl_taps * 2):
    #     out_str.append("    {} // [{}]".format('{', i))
    #     byt_coef = [byte_coef(i, b, taps) for b in range(256)]
    #     coefs = ["{}".format(coef) for coef in byt_coef]
    #     out_str.append("        {}".format(", ".join(coefs)))
    #     out_str.append("    },")

    out_str.append("#endif // PDM_FIR__H")
    out_str.append("")

    fp = open(base_path / "pdm_fir" / "pdm_fir_.h", "w")
    fp.write("\n".join(out_str))

    print("Generation Finished, you can now copy the folder \"{}\" into your C project".format(
        (base_path / "pdm_fir").absolute()))
    fp.close()

    if args.plot:
        plt.show()
    return 0


if __name__ == "__main__":
    exit(main())
